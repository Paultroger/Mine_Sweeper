static import com.mypackage.InputOutput.*;

public class Token {

    /* state: total amount of bombs, the number of hidden (not yet inspected)
     * cells and the number of cells marked by the user.
     */
    state TableTop
    state BackEnd
    state int (bombs)
    state int (hidden cells)
    state int (marked cells)

    Constructor() {
        initialize table top, back end
        welcomeMessage
        ask for board size and set
        ask for difficulty and set
    }

    runGame() {
        tell user number of hidden cells
        ask user to go ahead
        ask user for coordinates with a prompt at stout
            validateInput(commLineInput()).markCell().clString())
            or
            validateInput(commLineInput()).inspectCell().clString())
        verify end condition
    }

    public TableTop validateInput(int[] intArray) {
        validate input
        return TableTop;
    }

    /* Following are the two main methods that the user cares the most about.
     * They hold the main actions of the user. Therefore they are placed
     * here in the Token class. Both of them return a TableTop object in order
     * to enable method chaining.
     */
    public TableTop markCell(int[] intArray){
        switch (symbol) {
            case 'B':   if (tableTop[y][x] == 'B')
                        tableTop[y][x] = 'x';
                else
                        tableTop[y][x] = 'B';
                break;
            case 'i':   tableTop[y][x] = inspectCell(y , x);
                        break;
            default:    break;
        }
        return TableTop;
    }

    public TableTop inspectCell(int[] intArray) {
        print question
        create new int[]
        create new StringBuilder
        int bombs = this.TableTop.scan(intArray);
        change state of TableTop
        return TableTop;
    }

    // To verify the end condition refer back to BombLogic.
    public boolean verifyEndCondition() {
        if cell holds a bomb
            print "BUMM! You're dead!"
            mark exploded mine
            return true;
        }
        else
            return false;
    }

}